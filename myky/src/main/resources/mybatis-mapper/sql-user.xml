<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teamgyodong.myky.user.mapper.UserMapper">
	<select id="getUser" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
		SELECT *
		FROM USERS
		WHERE USER_ID = #{userId}
	</select>
	
	<update id="updateLastLogin" parameterType="hashmap">
		UPDATE USERS
		SET
		LAST_LOGIN = SYSDATE
		WHERE USER_ID = #{userId}
	</update>
	
	
	<update id="updatePwd" parameterType="hashmap">
		  UPDATE USERS
			SET
			PASSWORD = #{pwd}
			WHERE USER_ID = #{userId}
	</update>
	
	<select id="selectUser" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
		SELECT USER_ID,USERNAME,NICKNAME,EMAIL,PROFILE_IMAGE,PHONE_NUMBER, ADDRESS,ROLE,EMAIL_YN,PHONE_YN,GENDER,TO_CHAR(BIRTH_DATE,'YYYYMMDD') AS BIRTHDATE
		FROM USERS
		WHERE 1=1
		<if test="userId != null">
		AND USER_ID = #{userId}
		</if>
		<if test="phoneNumber != null and userName != null">
		AND PHONE_NUMBER = #{phoneNumber}
        AND USERNAME = #{userName}
		</if>
		AND DELETE_YN != 'Y'
	</select>
	
	<select id="selectNick" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
		SELECT *
		FROM USERS
		WHERE NICKNAME = #{nickName}
	</select>
	
	<insert id="insertUser" parameterType="hashmap" >
		INSERT INTO USERS(USER_ID,USERNAME,PASSWORD,NICKNAME,EMAIL,PHONE_NUMBER,BIRTH_DATE,ADDRESS,CREATED_AT,ROLE,GENDER,AGREE_YN,EMAIL_YN,PHONE_YN,DELETE_YN) 
		VALUES (#{userId},#{userName},#{pwd},#{nickName},#{email},#{phoneNumber},#{birthDate},#{address},SYSDATE,'USER',#{gender},'Y',#{emailYn},#{phoneYn},'N')   
	</insert>
	
	<update id="updateInfo" parameterType="hashmap" >
		UPDATE USERS
		SET 
		USERNAME = #{userName},
		NICKNAME = #{nickName},
		EMAIL = #{email},
		PHONE_NUMBER = #{phoneNumber},
		ADDRESS = #{address},
		GENDER = #{gender},
		EMAIL_YN = #{emailYn},
		PHONE_YN = #{phoneYn},
		BIRTH_DATE = #{birthDate},
		PROFILE_IMAGE = #{profileImage},
		UPDATED_AT = SYSDATE
		WHERE USER_ID = #{userId}
	</update>
	
		<update id="insertProfileImg" parameterType="hashmap" >
		UPDATE USERS
		SET 
		PROFILE_IMAGE = #{path}
		WHERE USER_ID = #{userId}
	</update>
	
		<update id="updateWithdraw" parameterType="hashmap" >
			UPDATE USERS
			SET
			DELETE_AT = SYSDATE,
			DELETE_YN ='Y'
			WHERE USER_ID = #{userId}
	</update>
	
	<select id="selectComm" parameterType="hashmap" resultType="teamgyodong.myky.board.model.comment">
        SELECT *
        FROM FREE_BOARD_COMMENT C
        INNER JOIN FREE_BOARD B ON C.BOARD_ID = B.BOARD_ID
        WHERE C.USER_ID = #{userId}
        <if test="commKeyword != ''">
        AND C.CONTENT LIKE '%' || #{commKeyword} || '%'
        </if>
        ORDER BY C.CREATED_AT DESC
        OFFSET #{page2} ROWS FETCH NEXT #{pageSize2} ROWS ONLY
        
	</select>
	
	<select id="selectCommentCnt" parameterType="hashmap" resultType="int">
	       SELECT COUNT(*)
        FROM FREE_BOARD_COMMENT
        WHERE USER_ID = #{userId}
        AND IS_DELETED= 'N'
        <if test="commKeyword != ''">
        AND CONTENT LIKE '%' || #{commKeyword} || '%'
        </if>
	</select>
	
	<select id="selectDonaInfo" parameterType="hashmap" resultType="teamgyodong.myky.donation.model.donation">
        SELECT D.*, C.CENTER_NAME,U.NICKNAME,
        TO_CHAR(DONATION_DATE,'YYYY-MM-DD HH24:MI') AS donationDate
        FROM DONATION_HISTORY D
        LEFT JOIN DONATION_CENTER C ON D.CENTER_ID = C.CENTER_ID
        JOIN USERS U ON D.USER_ID = U.USER_ID
        WHERE D.USER_ID =#{userId}
        ORDER BY DONATION_DATE DESC
        OFFSET #{page4} ROWS FETCH NEXT #{pageSize4} ROWS ONLY
	</select>
	
	<select id="selectDonaCnt" parameterType="hashmap" resultType="int">
        SELECT COUNT(*)
        FROM DONATION_HISTORY
        WHERE USER_ID = #{userId}
	</select>
	
	<select id="sumDona" parameterType="hashmap" resultType="teamgyodong.myky.donation.model.donation">
        SELECT NVL(TO_CHAR(SUM(AMOUNT),'fm999,999,999,999'),0) AS amount
        FROM DONATION_HISTORY
        WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectVet" parameterType="hashmap" resultType="teamgyodong.myky.manager.model.Vet">
        SELECT *
        FROM USERS U
        INNER JOIN VETERINARIAN V ON U.USER_ID = V.USER_ID
        WHERE U.USER_ID = #{userId}
	</select>
	
	<select id="selectPoint" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
        SELECT *
        FROM POINT
        WHERE USER_ID = #{userId}
        ORDER BY USAGE_DATE DESC
        OFFSET #{page3} ROWS FETCH NEXT #{pageSize3} ROWS ONLY
	</select>
	
	<select id="selectPointCnt" parameterType="hashmap" resultType="int">
        SELECT COUNT(*)
        FROM POINT
        WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectCoupon" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
        SELECT C.*, TO_CHAR(CREATED_AT,'YYYY-MM-DD') AS createdAt, TO_CHAR(EXPIRATION_DATE,'YYYY-MM-DD') AS expirationDate
        FROM COUPON C
        WHERE USER_ID = #{userId}
        OFFSET #{couponPage} ROWS FETCH NEXT #{couponPageSize} ROWS ONLY
	</select>
		
	<select id="selectCouponCnt" parameterType="hashmap" resultType="int">
        SELECT COUNT(*)
        FROM COUPON C
        WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectUserOrderList" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	   
select o.order_id, o.total_price, o.order_status, o.ordered_at, o.user_id, o.receiver_name, o.receiver_phone, o.receiver_addr, o.delivery_message, p.product_name, p.filepath, od.order_detail_id, od.product_id, od.quantity, od.price, od.refund_status
	    from orders o
	    join order_details od on o.order_id = od.order_id
	    join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on od.product_id = p.product_id
	    where o.user_id = #{userId}
        order by o.ordered_at desc
		OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY
	</select>
	
	<select id="selectOrderCnt" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
		WITH REFUND_STATUS_LIST (REFUND_STATUS) AS (
		    SELECT 'shipped' FROM dual
		    UNION ALL
		    SELECT 'delivered' FROM dual
    		UNION ALL
		    SELECT 'none' FROM dual
		    UNION ALL
		    SELECT 'exchange' FROM dual
		    UNION ALL
		    SELECT 'return' FROM dual
		    
		)
		
		SELECT 
		    r.REFUND_STATUS,
		    COUNT(od.REFUND_STATUS) AS orderCount
		FROM 
		    REFUND_STATUS_LIST r
		LEFT JOIN (
		    SELECT od.REFUND_STATUS
		    FROM orders o
		    JOIN order_details od ON o.order_id = od.order_id
		    JOIN (
		        SELECT p.product_id, f.filepath
		        FROM product p
		        LEFT JOIN product_file f 
		            ON p.product_id = f.product_id AND f.thumbnail = 'Y'
		    ) p ON od.product_id = p.product_id
		    WHERE o.user_id = #{userId}
		) od ON r.REFUND_STATUS = od.REFUND_STATUS
		GROUP BY r.REFUND_STATUS
		ORDER BY r.REFUND_STATUS
	</select>
	
	
	<select id="selectEmail" parameterType="hashmap" resultType="teamgyodong.myky.user.model.User">
		SELECT *
		FROM USERS
		WHERE 1=1 
		AND EMAIL = #{email}
		<if test="userId != null">
		AND USER_ID = #{userId}
		AND DELETE_YN != 'Y'
		</if>
	</select>
	
	
	<select id="selectMembershipId"  parameterType="hashmap" resultType="teamgyodong.myky.membership.model.Membership">
		SELECT *
	    FROM MEMBERSHIP
	    WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectOrderAllCnt" parameterType="hashmap" resultType="int">
select COUNT(*)
	    from orders o
	    join order_details od on o.order_id = od.order_id
	    join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on od.product_id = p.product_id
	    where o.user_id = #{userId}
	</select>
	
	
</mapper>
