<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teamgyodong.myky.cart.mapper.CartMapper">
	
	
	<select id="selectCartList" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
		
		select c.cart_id, c.user_id, c.session_id, c.created_at, ci.check_yn, ci.cart_item_id, ci.product_id, p.product_name, p.price, p.shipping_fee, p.shipping_free_minimum, ci.quantity, p.filepath, p.discount
		from cart c
		join cart_item ci on c.cart_id = ci.cart_id
		join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on ci.product_id = p.product_id
		where c.user_id = #{userId}
			
	</select>

	<select id="selectCartCheckList" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
		
		select c.cart_id, c.user_id, c.session_id, c.created_at, ci.check_yn, ci.cart_item_id, ci.product_id, p.product_name, p.price, p.shipping_fee, p.shipping_free_minimum, ci.quantity, p.filepath, p.discount
		from cart c
		join cart_item ci on c.cart_id = ci.cart_id
		join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on ci.product_id = p.product_id
		where c.user_id = #{userId} and ci.check_yn = 'Y'
			
	</select>
	
	<update id="updateCartQuantity" parameterType="hashmap">
	
		update cart_item
		set
			quantity = quantity + #{quantity}
		where cart_id = #{cartId} and product_id = #{productId}
	
	</update>
	
	<update id="updateCartCheckYn" parameterType="hashmap">
	
		update cart_item
		set
			check_yn = #{checkYn}
		where cart_id = #{cartId} and product_id = #{productId}
	
	</update>

	<update id="updateCartAllCheckYn" parameterType="hashmap">
	
		update cart_item
		set
			check_yn = #{checkYn}
		where cart_id in (select cart_id from cart where user_id = #{userId})
	
	</update>
	
	<update id="updateCartAllCheckY" parameterType="hashmap">
	
		update cart_item
		set
			check_yn = 'Y' 
		where cart_id = #{cartId}
	
	</update>
	
	<update id="updateQuantity" parameterType="hashmap">
	
		update cart_item
		set
			quantity = #{quantity}
		where cart_id = #{cartId} and product_id = #{productId}
	
	</update>

	<update id="updateOrderStatus" parameterType="hashmap">
	
		update orders
		set
		<if test="orderStatus == 'cancel'">
			refund_request_date = sysdate,
		</if>
			order_status = #{orderStatus},
			updated_at = sysdate
		where order_id = #{orderId} and user_id = #{userId}
	
	</update>

	<update id="updateRefundStatus" parameterType="hashmap">
	
		update order_details
		set
			refund_status = #{refundStatus},
			refund_reason = #{reason},
			refund_reason_detail = #{reasonDetail},
			refund_request_date = sysdate
		where order_detail_id = #{orderDetailId}
	
	</update>

	<update id="updateOrderInfo" parameterType="hashmap">
	
		update orders
		set
			receiver_name = #{receiverName},
			receiver_phone = #{receiverPhone},
			receiver_addr = #{receiverAddr},
			delivery_message = #{deliveryMessage},
			updated_at = sysdate
		where order_id = #{orderId} and user_id = #{userId}
	
	</update>
	
	<update id="decreaseQuantity" parameterType="hashmap">
	
		update order_details
		set quantity = quantity - #{splitQuantity},
			price = price - #{price}
		where order_detail_id = #{orderDetailId}
		
	</update>
	
	<delete id="deleteCartProduct" parameterType="hashmap">
	
		delete cart_item
		where  cart_item_id = #{cartItemId}
	
	</delete>

	<delete id="deleteCart" parameterType="hashmap">
	
		delete cart
		where  cart_id = #{cartId}
	
	</delete>

	<delete id="deleteCartItem" parameterType="hashmap">
	
		delete cart_item
		where  cart_id = #{cartId}
	
	</delete>
	
	<insert id="insertCartProduct" parameterType="hashmap">
	
		insert into cart_item
		values (cart_item_seq.nextval, #{quantity}, #{cartId}, #{productId}, #{checkYn})
	
	</insert>
	
	<insert id="insertCart" parameterType="hashmap" useGeneratedKeys="true" keyColumn="cart_id" keyProperty="cartId">
	
		insert into cart
		values (cart_seq.nextval, sysdate, #{sessionId}, #{userId})
	
	</insert>

	<insert id="insertCartOrder" parameterType="hashmap" useGeneratedKeys="true" keyColumn="order_id" keyProperty="orderId">
	
		insert into orders (order_id, total_price, ordered_at, user_id, receiver_name, receiver_phone, receiver_addr, payment_method, delivery_message , UPDATED_AT)
		values (#{orderId}, #{totalPrice}, sysdate, #{userId}, #{receiverName}, #{receiverPhone}, #{receiverAddr}, #{paymentMethod}, #{deliveryMessage}, SYSDATE)
	
	</insert>

	<insert id="insertCartOrderDetail" parameterType="hashmap">
		INSERT ALL 
		
		<foreach collection="orderDetails" item="order" separator=" " >
		into order_details (order_detail_id, product_id, quantity, price, order_id)
		values
	        (
				get_order_details_id(),
				#{order.productId},
	            #{order.quantity},
	            #{order.price},
	            #{orderId}
	        )
    	</foreach>
    	
    	SELECT * FROM DUAL	
	</insert>
	
	<insert id="insertPartialRefund" parameterType="hashmap">
	
		insert into order_details (
			order_detail_id, product_id, quantity, price, order_id,
		    refund_status, refund_request_date, refund_reason, refund_reason_detail
		)
		select
		    order_details_seq.nextval, product_id, #{splitQuantity}, #{price}, order_id,
		    #{refundStatus}, sysdate, #{reason}, #{reasonDetail}
		from order_details
		where order_detail_id = #{orderDetailId}
		
	</insert>
	
	<select id="findCart" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	   
	    select cart_id from cart where user_id = #{userId}
	
	</select>

	<select id="findCartItem" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	
		select c.cart_id, c.user_id, c.session_id, c.created_at, ci.cart_item_id, ci.product_id, p.product_name, p.price, ci.quantity
		from cart c
		join cart_item ci on c.cart_id = ci.cart_id
		join product p on ci.product_id = p.product_id
		where c.cart_id = #{cartId} and ci.product_id = #{productId}
	
	</select>
	
	<select id="findTotalQuantity" resultType="int">
	    
	    select quantity from order_details where order_detail_id = #{orderDetailId}
	    
	</select>
	
	<select id="selectOrderInfo" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	   
	    select order_id, total_price, ordered_at, user_id, receiver_name, receiver_phone, receiver_addr, delivery_message
	    from orders
	    where user_id = #{userId} and order_id = #{orderId}
	
	</select>
	
	<select id="selectOrderList" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	   
	    select o.order_id, o.total_price, o.order_status, o.user_id, o.receiver_name, o.receiver_phone, o.receiver_addr, o.delivery_message, p.product_name, p.filepath, od.order_detail_id, od.quantity, od.price
	    from orders o
	    join order_details od on o.order_id = od.order_id
	    join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on od.product_id = p.product_id
	    where user_id = #{userId} and o.order_id = #{orderId}
	
	</select>
	
	<select id="selectAllOrderList" parameterType="hashmap" resultType="teamgyodong.myky.cart.model.cart">
	   
	    select o.order_id, o.total_price, o.order_status, o.ordered_at, o.user_id, o.receiver_name, o.receiver_phone, o.receiver_addr, o.delivery_message, p.product_name, p.filepath, od.order_detail_id, od.product_id, od.quantity, od.price, od.refund_status
	    from orders o
	    join order_details od on o.order_id = od.order_id
	    join (
			select p.*, f.filepath
		    from product p  
		    left join product_file f on p.product_id = f.product_id and f.thumbnail = 'Y'
		) p on od.product_id = p.product_id
	    where o.user_id = #{userId} and o.ordered_at between #{startDate} and TO_DATE('' || #{endDate} || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
	    <if test="orderStatuses != null and orderStatuses.size() > 0">
			and o.order_id in (
				select distinct o2.order_id
				from orders o2
				where o2.order_status in 
				<foreach collection="orderStatuses" item="status" open="(" separator="," close=")">
					#{status}
				</foreach>
			)
		</if>
	    <if test="refundStatuses != null and refundStatuses.size() > 0">
		    and o.order_id in (
				select distinct o2.order_id
				from orders o2
				join order_details od2 on o2.order_id = od2.order_id
				where od2.refund_status in
				<foreach collection="refundStatuses" item="status" open="(" separator="," close=")">
					#{status}
				</foreach>
			)
		</if>
	    order by o.ordered_at desc
	
	</select>
	
	<select id="getPartnerCount" parameterType="hashmap" resultType="int">
	    select count(*) from partner_detail
	    where 1=1
		<if test="searchKeyword != null and searchKeyword != ''">
		and (name like '%' || #{searchKeyword} || '%'
		or address like '%' || #{searchKeyword} || '%')
		</if>
		<if test="categoryCode != null and categoryCode != ''">
			and category_code = #{categoryCode}
		</if>
	</select>
	
</mapper>




